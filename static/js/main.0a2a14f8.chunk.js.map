{"version":3,"sources":["Weather.js","Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","props","data","day","className","length","map","ele","icon","date","Date","dt_txt","weather","main","getHours","src","alt","height","width","temp","toFixed","indexOf","Forecast","useState","setData","today","getDate","getDay","useEffect","fetch","then","res","json","list","filter","element","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAwDeA,MArDf,SAAiBC,GACf,IAAQC,EAAcD,EAAdC,KAAMC,EAAQF,EAARE,IAWd,OACE,gCACE,oBAAIC,UAAU,YAAd,SAZS,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAKkCD,KAChC,qBAAKC,UAAU,gBAAf,SACmB,IAAhBF,EAAKG,OACJ,0CAEAH,EAAKI,KAAI,SAACC,GACR,IACIC,EADAC,EAAO,IAAIC,KAAKH,EAAII,QAWxB,MAR4B,WAAxBJ,EAAIK,QAAQ,GAAGC,KACjBL,EAAO,eAC0B,SAAxBD,EAAIK,QAAQ,GAAGC,KACxBL,EAAO,cAC0B,UAAxBD,EAAIK,QAAQ,GAAGC,OACxBL,EAAO,oBAIP,qBAAKJ,UAAU,mBAAf,SACE,gCACE,+BAAKK,EAAKK,WAAV,SACA,qBACEC,IAAKP,EACLQ,IAAI,UACJC,OAAO,QACPC,MAAM,UAER,uBACA,oCAAOX,EAAIM,KAAKM,KAAO,QAAQC,QAAQ,GAAvC,eATQlB,EAAKmB,QAAQd,eC6BxBe,MA9Df,WACE,MAAwBC,mBAAS,IAAjC,mBAAOrB,EAAP,KAAasB,EAAb,KACMC,GAAQ,IAAIf,MAAOgB,UACnBvB,GAAM,IAAIO,MAAOiB,SAYvB,OAXAC,qBAAU,WACRC,MACE,oGACAC,MAAK,SAACC,GAAD,OACLA,EAAIC,OAAOF,MAAK,SAACC,GACfP,EAAQO,EAAIE,cAGf,IAID,qCACE,qBAAK7B,UAAU,UAAf,SACE,cAAC,EAAD,CAEEF,KAAMA,EAAKgC,QACT,SAACC,GAAD,OAAa,IAAIzB,KAAKyB,EAAQxB,QAAQe,YAAcD,KAEtDtB,IAAKA,GAJD,OAOR,qBAAKC,UAAU,UAAf,SACE,cAAC,EAAD,CACEF,KAAMA,EAAKgC,QACT,SAACC,GAAD,OAAa,IAAIzB,KAAKyB,EAAQxB,QAAQe,YAAcD,EAAQ,KAE9DtB,KAAMA,EAAM,GAAG,MAGnB,qBAAKC,UAAU,YAAf,SACE,cAAC,EAAD,CACEF,KAAMA,EAAKgC,QACT,SAACC,GAAD,OAAa,IAAIzB,KAAKyB,EAAQxB,QAAQe,YAAcD,EAAQ,KAE9DtB,KAAMA,EAAM,GAAG,MAGnB,qBAAKC,UAAU,WAAf,SACE,cAAC,EAAD,CACEF,KAAMA,EAAKgC,QACT,SAACC,GAAD,OAAa,IAAIzB,KAAKyB,EAAQxB,QAAQe,YAAcD,EAAQ,KAE9DtB,KAAMA,EAAM,GAAG,MAGnB,qBAAKC,UAAU,WAAf,SACE,cAAC,EAAD,CACEF,KAAMA,EAAKgC,QACT,SAACC,GAAD,OAAa,IAAIzB,KAAKyB,EAAQxB,QAAQe,YAAcD,EAAQ,KAE9DtB,KAAMA,EAAM,GAAG,UC/CViC,MATf,WACE,OACE,gCACE,oBAAIhC,UAAU,SAAd,8BACA,cAAC,EAAD,QCMSiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.0a2a14f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Weather(props) {\r\n  const { data, day } = props;\r\n  const days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"day-title\">{days[day]}</h3>\r\n      <div className=\"day-container\">\r\n        {data.length === 0 ? (\r\n          <h4>No data!</h4>\r\n        ) : (\r\n          data.map((ele) => {\r\n            let date = new Date(ele.dt_txt);\r\n            let icon;\r\n\r\n            if (ele.weather[0].main === \"Clouds\") {\r\n              icon = \"wi-cloud.svg\";\r\n            } else if (ele.weather[0].main === \"Rain\") {\r\n              icon = \"wi-rain.svg\";\r\n            } else if (ele.weather[0].main === \"Clear\") {\r\n              icon = \"wi-day-sunny.svg\";\r\n            }\r\n\r\n            return (\r\n              <div className=\"detail-container\">\r\n                <div key={data.indexOf(ele)}>\r\n                  <h4>{date.getHours()}:00</h4>\r\n                  <img\r\n                    src={icon}\r\n                    alt=\"weather\"\r\n                    height=\"100px\"\r\n                    width=\"100px\"\r\n                  ></img>\r\n                  <br />\r\n                  <h4> {(ele.main.temp - 273.15).toFixed(2)} â„ƒ</h4>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Weather from \"./Weather\";\r\n\r\nfunction Forecast() {\r\n  const [data, setData] = useState([]);\r\n  const today = new Date().getDate();\r\n  const day = new Date().getDay();\r\n  useEffect(() => {\r\n    fetch(\r\n      \"http://api.openweathermap.org/data/2.5/forecast?q=toronto&appid=f5d1a9b91c10ba912e3f13a885e2a072\"\r\n    ).then((res) =>\r\n      res.json().then((res) => {\r\n        setData(res.list);\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"day-one\">\r\n        <Weather\r\n          key=\"0\"\r\n          data={data.filter(\r\n            (element) => new Date(element.dt_txt).getDate() === today\r\n          )}\r\n          day={day}\r\n        />\r\n      </div>\r\n      <div className=\"day-two\">\r\n        <Weather\r\n          data={data.filter(\r\n            (element) => new Date(element.dt_txt).getDate() === today + 1\r\n          )}\r\n          day={(day + 1)%7}\r\n        />\r\n      </div>\r\n      <div className=\"day-three\">\r\n        <Weather\r\n          data={data.filter(\r\n            (element) => new Date(element.dt_txt).getDate() === today + 2\r\n          )}\r\n          day={(day + 2)%7}\r\n        />\r\n      </div>\r\n      <div className=\"day-four\">\r\n        <Weather\r\n          data={data.filter(\r\n            (element) => new Date(element.dt_txt).getDate() === today + 3\r\n          )}\r\n          day={(day + 3)%7}\r\n        />\r\n      </div>\r\n      <div className=\"day-five\">\r\n        <Weather\r\n          data={data.filter(\r\n            (element) => new Date(element.dt_txt).getDate() === today + 4\r\n          )}\r\n          day={(day + 4)%7}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Forecast;\r\n","import Forecast from \"./Forecast\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h2 className=\"banner\">Toronto Forecast</h2>\r\n      <Forecast></Forecast>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}